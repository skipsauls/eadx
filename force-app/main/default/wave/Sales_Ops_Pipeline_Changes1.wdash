{"dataSourceLinks":[],"filters":[],"gridLayouts":[{"maxWidth":1240,"name":"Default","numColumns":48,"pages":[{"name":"1106e882-a085-430f-a4cb-cb14f8d41083","navigationHidden":false,"widgets":[{"colspan":45,"column":3,"name":"container_2","row":0,"rowspan":6,"widgetStyle":{"borderColor":"#E6ECF2","borderEdges":["bottom"]}},{"colspan":5,"column":1,"name":"listselector_1","row":7,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":36,"name":"number_1","row":15,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(9, 26, 62, 0)","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":37,"name":"listselector_2","row":7,"rowspan":4,"widgetStyle":{"backgroundColor":"#F2F6FA","borderColor":"#F2F6FA","borderEdges":["left"],"borderRadius":0,"borderWidth":8}},{"colspan":4,"column":4,"name":"link_overview","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":46,"column":1,"name":"chart_1","row":23,"rowspan":27,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":1,"name":"number_2","row":15,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(9, 26, 62, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":19,"name":"number_3","row":15,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(9, 26, 62, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":28,"name":"number_4","row":16,"rowspan":2,"widgetStyle":{"backgroundColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderEdges":[],"borderRadius":16,"borderWidth":1}},{"colspan":48,"column":0,"name":"container_1","row":88,"rowspan":46,"widgetStyle":{"borderEdges":[]}},{"colspan":46,"column":1,"name":"table_1","row":94,"rowspan":38,"widgetStyle":{"borderEdges":[]}},{"colspan":20,"column":3,"name":"text_3","row":90,"rowspan":4,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":[],"borderWidth":8}},{"colspan":5,"column":7,"name":"listselector_5","row":7,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":13,"name":"listselector_8","row":7,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":19,"name":"listselector_9","row":7,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":0,"name":"container_7","row":52,"rowspan":36,"widgetStyle":{"borderColor":"#E6ECF2","borderEdges":["bottom"],"borderWidth":1}},{"colspan":9,"column":1,"name":"text_5","row":54,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":14,"column":17,"name":"listselector_4","row":59,"rowspan":4,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":[],"borderWidth":8}},{"colspan":14,"column":33,"name":"listselector_13","row":59,"rowspan":4,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":[],"borderWidth":8}},{"colspan":14,"column":1,"name":"listselector_14","row":59,"rowspan":4,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":[],"borderWidth":8}},{"colspan":20,"column":27,"name":"pillbox_1","row":55,"rowspan":2,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#C5D3E0","borderEdges":["all"],"borderRadius":4,"borderWidth":1}},{"colspan":14,"column":17,"name":"chart_3","row":63,"rowspan":23,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":14,"column":33,"name":"chart_4","row":63,"rowspan":23,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#F2F6FA","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":14,"column":1,"name":"chart_5","row":63,"rowspan":23,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#F2F6FA","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":17,"name":"link_by_product","row":1,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":41,"name":"listselector_16","row":90,"rowspan":4,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":34,"name":"text_6","row":91,"rowspan":2,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":[],"borderWidth":4}},{"colspan":5,"column":25,"name":"listselector_17","row":7,"rowspan":4,"widgetStyle":{"backgroundColor":"#F2F6FA","borderEdges":[]}},{"colspan":48,"column":0,"name":"container_8","row":6,"rowspan":7,"widgetStyle":{"backgroundColor":"#F2F6FA","borderColor":"#F2F6FA","borderEdges":["left","right","top"],"borderRadius":0,"borderWidth":8}},{"colspan":48,"column":0,"name":"container_3","row":21,"rowspan":31,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":48,"column":0,"name":"container_14","row":13,"rowspan":8,"widgetStyle":{"backgroundColor":"rgb(5, 16, 39)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":12,"name":"link_2","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":4}},{"colspan":4,"column":8,"name":"text_current_dashboard","row":1,"rowspan":5,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#44A2F5","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":3,"column":0,"name":"container_19","row":0,"rowspan":6,"widgetStyle":{"borderEdges":["bottom"]}},{"colspan":2,"column":1,"name":"image_1","row":90,"rowspan":4,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["bottom","top"],"borderRadius":0,"borderWidth":4}},{"colspan":3,"column":0,"name":"link_4","row":1,"rowspan":4,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}}]}],"rowHeight":"fine","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"#E6ECF2","cellSpacingX":0,"cellSpacingY":0,"documentId":"","fit":"original","gutterColor":"#E6ECF2"},"version":1.0},{"name":"Phone","numColumns":24,"pages":[{"name":"1106e882-a085-430f-a4cb-cb14f8d41083","navigationHidden":false,"widgets":[{"colspan":10,"column":1,"name":"listselector_2","row":3,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":13,"name":"listselector_1","row":3,"rowspan":3,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":2,"name":"number_2","row":33,"rowspan":3,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":14,"name":"number_1","row":33,"rowspan":3,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":15,"column":1,"name":"number_3","row":8,"rowspan":6,"widgetStyle":{"backgroundColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":18,"name":"number_4","row":8,"rowspan":2,"widgetStyle":{"backgroundColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderEdges":["all"],"borderRadius":8,"borderWidth":1}},{"colspan":16,"column":0,"name":"text_3","row":118,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"table_1","row":121,"rowspan":28,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"container_1","row":38,"rowspan":19,"widgetStyle":{"backgroundColor":"#FFFFFF","borderEdges":["all"],"borderWidth":8}},{"colspan":24,"column":0,"name":"chart_2","row":41,"rowspan":16,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"chart_5","row":101,"rowspan":16,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"chart_3","row":61,"rowspan":16,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"chart_4","row":81,"rowspan":16,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"listselector_14","row":98,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"listselector_13","row":78,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":16,"name":"listselector_16","row":118,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"listselector_3","row":38,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"listselector_4","row":58,"rowspan":3,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"chart_1","row":15,"rowspan":16,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":24,"column":0,"name":"container_18","row":118,"rowspan":31,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":8}},{"colspan":24,"column":0,"name":"container_20","row":98,"rowspan":19,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":8}},{"colspan":24,"column":0,"name":"container_21","row":78,"rowspan":19,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":8}},{"colspan":24,"column":0,"name":"container_22","row":58,"rowspan":19,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["all"],"borderRadius":4,"borderWidth":8}}]}],"rowHeight":"fine","selectors":["maxWidth(599)"],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"#091A3E","cellSpacingX":0,"cellSpacingY":0,"documentId":"","fit":"original"},"version":1.0}],"layouts":[],"steps":{"pipeline_change_color":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"sum\",\"percent\"]],\"pigql\":\"q = load \\\"eadx__pipeline_trending1\\\"; q = group q by all; q = foreach q generate {{coalesce(cell(pipeline_change.result, 0, \\\"sum_Amount\\\"), 0).asObject()}} as 'sum_Amount'; q = foreach q generate (case when 'sum_Amount' > 0 then \\\"#067D1E\\\" when 'sum_Amount' < 0 then \\\"#E3193B\\\" else \\\"#192B61\\\" end) as 'color', 'sum_Amount' as 'sum_Amount';\",\"groups\":[\"color\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":true},"Opportunity_Owner_Chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"eadx__pipeline_trending1\\\"; x1 = filter x1 by {{cell(source_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(AccountSource_Leadsource_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(location_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(BillingCountry_BillingState_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(account_industry_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Account_Type_Industry_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.Owner.Name') as 'Opportunity.Account.Owner.Name', last(upd_end.'Opportunity.Owner.UniqueUserName') as 'Opportunity.Owner.UniqueUserName', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Account.Owner.Name', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Account.Owner.Name', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Account.Owner.Name', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Owner.UniqueUserName') as 'Opportunity.Owner.UniqueUserName', last('Opportunity.Account.Owner.Name') as 'Opportunity.Account.Owner.Name', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', {{row(opportunity_owner_dimension_dropdown.selection, [], [\\\"dimension\\\", \\\"grouping_column\\\"]).asProjection()}}, 'Opportunity.CloseDate', 'Opportunity.Amount', 'Amount'; FINAL = group WATERFALL by 'Group'; FINAL = foreach FINAL generate 'Group', sum('Opportunity.Amount') as 'sum_Opportunity.Amount'; FINAL = order FINAL by 'sum_Opportunity.Amount' desc; FINAL = filter FINAL by 'Group' is not null;\",\"measures\":[[\"sum\",\"Opportunity.Amount\"]],\"groups\":[\"Group\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false,"visualizationParameters":{"visualizationType":"hbar"}},"pipeline_start":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"sum\",\"Amount\"]],\"pigql\":\"START = load \\\"eadx__pipeline_trending1\\\"; START = filter START by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; START = filter START by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; START = filter START by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; START = filter START by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; START = filter START by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; START = filter START by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; START = filter START by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; START = filter START by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; START = filter START by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; START = filter START by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = group START by all; START = foreach START generate \\\"0_START\\\" as 'Bucket', sum('Amount') as 'sum_Amount';\"}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"location_dimension_dropdown":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Billing Country\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Billing Country\",\"dimension\":\"'Opportunity.Account.BillingCountry'\",\"grouping_column\":\"Group\"}","{\"display\":\"Billing State/Province\",\"dimension\":\"'Opportunity.Account.BillingState'\",\"grouping_column\":\"Group\"}"]},"step_hbar_group":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"$ High to Low\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"$ High to Low\",\"value\":\"'sum_Amount' desc\"}","{\"display\":\"$ Low to High\",\"value\":\"'sum_Amount' asc\"}"]},"filter_account_industry":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.Industry\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"step_time":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"This Quarter\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Last 1 day (Month Close)\",\"CloseDate_1\":\"\\\"current month\\\"..\\\"current month\\\"\",\"CloseDate_2\":\"\\\"current month\\\"..\\\"current month\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"2 days ago\\\"\",\"Start_ValidTo\":\"\\\"1 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"1 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"2 days ago\\\"\",\"Update_ValidTo\":\"\\\"1 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"Last 1 day (Quarter Close)\",\"CloseDate_1\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"CloseDate_2\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"2 days ago\\\"\",\"Start_ValidTo\":\"\\\"1 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"1 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"2 days ago\\\"\",\"Update_ValidTo\":\"\\\"1 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"Last 7 days (Month Close)\",\"CloseDate_1\":\"\\\"current month\\\"..\\\"current month\\\"\",\"CloseDate_2\":\"\\\"current month\\\"..\\\"current month\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"8 days ago\\\"\",\"Start_ValidTo\":\"\\\"7 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"7 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"8 days ago\\\"\",\"Update_ValidTo\":\"\\\"7 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"Last 14 days (Month Close)\",\"CloseDate_1\":\"\\\"current month\\\"..\\\"current month\\\"\",\"CloseDate_2\":\"\\\"current month\\\"..\\\"current month\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"15 days ago\\\"\",\"Start_ValidTo\":\"\\\"14 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"14 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"15 days ago\\\"\",\"Update_ValidTo\":\"\\\"14 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"Last 7 days (Quarter Close)\",\"CloseDate_1\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"CloseDate_2\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"8 days ago\\\"\",\"Start_ValidTo\":\"\\\"7 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"7 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"8 days ago\\\"\",\"Update_ValidTo\":\"\\\"7 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"Last 14 days (Quarter Close)\",\"CloseDate_1\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"CloseDate_2\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"15 days ago\\\"\",\"Start_ValidTo\":\"\\\"14 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"14 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"15 days ago\\\"\",\"Update_ValidTo\":\"\\\"14 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"This Month\",\"CloseDate_1\":\"\\\"current month\\\"..\\\"current month\\\"\",\"CloseDate_2\":\"\\\"current month\\\"..\\\"current month\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"1 month ago\\\"\",\"Start_ValidTo\":\"\\\"current month\\\"..\",\"Update_End_ValidFrom\":\"\\\"current month\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"1 month ago\\\"\",\"Update_ValidTo\":\"\\\"current month\\\"..\\\"current day\\\"\"}","{\"display\":\"This Quarter\",\"CloseDate_1\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"CloseDate_2\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"1 quarter ago\\\"\",\"Start_ValidTo\":\"\\\"current quarter\\\"..\",\"Update_End_ValidFrom\":\"\\\"current quarter\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"1 quarter ago\\\"\",\"Update_ValidTo\":\"\\\"current quarter\\\"..\\\"current day\\\"\"}"]},"opportunity_owner_dimension_dropdown":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Opportunity Owner\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Opportunity Owner\",\"dimension\":\"'Opportunity.Owner.UniqueUserName'\",\"grouping_column\":\"Group\"}","{\"display\":\"Account Owner\",\"dimension\":\"'Opportunity.Account.Owner.Name'\",\"grouping_column\":\"Group\"}"]},"Id_1":{"broadcastFacet":false,"datasets":[{"name":"user1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"UniqueUserName\"],\"filters\":[[\"hasOpportunity\",[\"true\"],\"in\"]]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":true,"visualizationParameters":{"visualizationType":"hbar"}},"Opportunity_ForecastCategoryName_Toggle":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.ForecastCategoryName\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false},"filter_account_source":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.AccountSource\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false},"pipeline_change":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"sum\",\"Amount\"],[\"sum\",\"percent\"]],\"pigql\":\"x1 = load \\\"eadx__pipeline_trending1\\\"; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; c = group START by all full, END by all; c = foreach c generate coalesce(sum(END['Amount']), 0) - coalesce(sum(START['Amount']), 0) as 'sum_Amount', coalesce( (coalesce(sum(END['Amount']), 0) - coalesce(sum(START['Amount']), 0)) / coalesce(sum(START['Amount']), 0), 0) as 'sum_percent';\"}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"waterfall_chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"eadx__pipeline_trending1\\\"; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; x1 = filter x1 by 'Id' in all; x1 = filter x1 by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; START_REAL = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START_REAL = filter START_REAL by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START_REAL = filter START_REAL by 'Stage.IsClosed' == \\\"false\\\"; START_REAL = filter START_REAL by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START_REAL = group START_REAL by all; START_REAL = foreach START_REAL generate \\\"0_START\\\" as 'Bucket', sum('Amount') as 'sum_Amount'; START_FAKE = group x1 by all; START_FAKE = foreach START_FAKE generate \\\"0_START\\\" as 'Bucket', (count() - count()) as 'sum_Amount'; START = union START_FAKE, START_REAL; START = group START by all; START = foreach START generate last('Bucket') as 'Bucket', last('sum_Amount') as 'sum_Amount'; END_REAL = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END_REAL = filter END_REAL by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END_REAL = filter END_REAL by 'Stage.IsClosed' == \\\"false\\\"; END_REAL = filter END_REAL by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END_REAL = group END_REAL by all; END_REAL = foreach END_REAL generate \\\"9_END\\\" as 'Bucket', sum('Amount') as 'sum_Amount'; END_FAKE = group x1 by all; END_FAKE = foreach END_FAKE generate \\\"9_END\\\" as 'Bucket', (count() - count()) as 'sum_Amount'; END = union END_FAKE, END_REAL; END = group END by all; END = foreach END generate last('Bucket') as 'Bucket', last('sum_Amount') as 'sum_Amount'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as OpportunityId, upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Owner.UniqueUserName') as 'Opportunity.Owner.UniqueUserName', last(upd_end.'Opportunity.Account.Industry') as 'Opportunity.Account.Industry', last(upd_end.'Opportunity.Account.BillingCountry') as 'Opportunity.Account.BillingCountry'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = group upd_full_closed by 'Bucket'; upd_full_closed = foreach upd_full_closed generate 'Bucket', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then - sum('AmountEnd') when \\\"7_CLOSED_WON\\\" then - sum('AmountEnd') end ) as 'sum_Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = group upd_full_notinperiod by 'Bucket'; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then - sum('AmountEnd') when \\\"1_NEW\\\" then sum('AmountEnd') when \\\"2_REOPEN\\\" then sum('AmountEnd') when \\\"4_MOVED_IN\\\" then sum('AmountEnd') end ) as 'sum_Amount'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = group upd_delta by 'Bucket'; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then sum('AmountEnd') - sum('AmountStart') when \\\"3_EXPAND\\\" then sum('AmountEnd') - sum('AmountStart') end ) as 'sum_Amount'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = order WATERFALL by 'Bucket' asc;\",\"measures\":[[\"count\",\"*\",\"sum_Amount\"]],\"measuresMap\":{},\"groups\":[\"Bucket\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"filter_type":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.Type\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false},"dropdown_opportunity_type":{"broadcastFacet":true,"datasets":[{"name":"opportunity1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Type\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false},"dropdown_record_type":{"broadcastFacet":true,"datasets":[{"name":"opportunity1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Id\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false},"source_dimension_dropdown":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Account Source\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Account Source\",\"dimension\":\"'Opportunity.Account.AccountSource'\",\"grouping_column\":\"Group\"}","{\"display\":\"Lead Source\",\"dimension\":\"'Opportunity.LeadSource'\",\"grouping_column\":\"Group\"}"]},"AccountSource_Leadsource_Chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"eadx__pipeline_trending1\\\"; x1 = filter x1 by {{cell(location_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(BillingCountry_BillingState_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(account_industry_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Account_Type_Industry_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(opportunity_owner_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Opportunity_Owner_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.AccountSource' as 'Opportunity.Account.AccountSource', 'Opportunity.LeadSource' as 'Opportunity.LeadSource', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.AccountSource' as 'Opportunity.Account.AccountSource', 'Opportunity.LeadSource' as 'Opportunity.LeadSource', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.AccountSource') as 'Opportunity.Account.AccountSource', last(upd_end.'Opportunity.LeadSource') as 'Opportunity.LeadSource', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.AccountSource', 'Opportunity.LeadSource', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Account.AccountSource', 'Opportunity.LeadSource', 'Opportunity.Amount', 'Opportunity.CloseDate', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.AccountSource', 'Opportunity.LeadSource', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.AccountSource', 'Opportunity.LeadSource', 'Opportunity.Amount', 'Opportunity.CloseDate'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.AccountSource', 'Opportunity.LeadSource', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.AccountSource', 'Opportunity.LeadSource', 'Opportunity.Amount', 'Opportunity.CloseDate'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Account.AccountSource') as 'Opportunity.Account.AccountSource', last('Opportunity.LeadSource') as 'Opportunity.LeadSource', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', {{row(source_dimension_dropdown.selection, [], [\\\"dimension\\\", \\\"grouping_column\\\"]).asProjection()}}, 'Opportunity.CloseDate', 'Opportunity.Amount', 'Amount'; FINAL = group WATERFALL by 'Group'; FINAL = foreach FINAL generate 'Group', sum('Opportunity.Amount') as 'sum_Opportunity.Amount'; FINAL = order FINAL by 'sum_Opportunity.Amount' desc; FINAL = filter FINAL by 'Group' is not null;\",\"measures\":[[\"sum\",\"Opportunity.Amount\"]],\"groups\":[\"Group\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false,"visualizationParameters":{"visualizationType":"hbar"}},"filter_account_billing_state":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.BillingState\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"waterfall_detail":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"eadx__pipeline_trending1\\\"; x1 = filter x1 by {{cell(source_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(AccountSource_Leadsource_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(location_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(BillingCountry_BillingState_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(account_industry_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Account_Type_Industry_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(opportunity_owner_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Opportunity_Owner_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; x1 = filter x1 by 'Id' in all; x1 = filter x1 by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Name' as 'Opportunity.Account.Name', 'Opportunity.Name' as 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName' as 'Opportunity.Owner.UniqueUserName', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName' as 'Opportunity.ForecastCategoryName', 'Opportunity.StageName' as 'Opportunity.StageName'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Name' as 'Opportunity.Account.Name', 'Opportunity.Name' as 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName' as 'Opportunity.Owner.UniqueUserName', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName' as 'Opportunity.ForecastCategoryName', 'Opportunity.StageName' as 'Opportunity.StageName'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.Name') as 'Opportunity.Account.Name', last(upd_end.'Opportunity.Name') as 'Opportunity.Name', last(upd_end.'Opportunity.Owner.UniqueUserName') as 'Opportunity.Owner.UniqueUserName', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate', last(upd_end.'Opportunity.ForecastCategoryName') as 'Opportunity.ForecastCategoryName', last(upd_end.'Opportunity.StageName') as 'Opportunity.StageName', last(upd_end.'Opportunity.Account.Industry') as 'Opportunity.Account.Industry', last(upd_end.'Opportunity.Account.BillingCountry') as 'Opportunity.Account.BillingCountry'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Account.Name') as 'Opportunity.Account.Name', last('Opportunity.Name') as 'Opportunity.Name', last('Opportunity.Owner.UniqueUserName') as 'Opportunity.Owner.UniqueUserName', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Opportunity.ForecastCategoryName') as 'Opportunity.ForecastCategoryName', last('Opportunity.StageName') as 'Opportunity.StageName', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.UniqueUserName', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', 'Opportunity.Amount', sum('Amount') as 'sum_Amount'; WATERFALL = order WATERFALL by {{cell(step_hbar_group.selection, 0, \\\"value\\\").asString()}}; WATERFALL = limit WATERFALL 100;\",\"measures\":[[\"sum\",\"Amount\"]],\"groups\":[\"Opportunity.Name\",\"Opportunity.Owner.UniqueUserName\",\"Opportunity.ForecastCategoryName\",\"Opportunity.StageName\",\"Opportunity.CloseDate\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"filter_lead_source":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.LeadSource\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"account_industry_dimension_dropdown":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Account Type\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Account Type\",\"dimension\":\"'Opportunity.Account.Type'\",\"grouping_column\":\"Group\"}","{\"display\":\"Industry\",\"dimension\":\"'Opportunity.Account.Industry'\",\"grouping_column\":\"Group\"}"]},"Account_Type_Industry_Chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"eadx__pipeline_trending1\\\"; x1 = filter x1 by {{cell(source_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(AccountSource_Leadsource_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(location_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(BillingCountry_BillingState_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(opportunity_owner_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Opportunity_Owner_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Type', 'Opportunity.Account.Industry', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Type', 'Opportunity.Account.Industry', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.Industry') as 'Opportunity.Account.Industry', last(upd_end.'Opportunity.Account.Type') as 'Opportunity.Account.Type', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Type', 'Opportunity.Account.Industry', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Account.Type', 'Opportunity.Account.Industry', 'Opportunity.Amount', 'Opportunity.CloseDate', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Type', 'Opportunity.Account.Industry', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Type', 'Opportunity.Account.Industry', 'Opportunity.Amount', 'Opportunity.CloseDate'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Type', 'Opportunity.Account.Industry', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Type', 'Opportunity.Account.Industry', 'Opportunity.Amount', 'Opportunity.CloseDate'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Account.Type') as 'Opportunity.Account.Type', last('Opportunity.Account.Industry') as 'Opportunity.Account.Industry', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', {{row(account_industry_dimension_dropdown.selection, [], [\\\"dimension\\\", \\\"grouping_column\\\"]).asProjection()}}, 'Opportunity.CloseDate', 'Opportunity.Amount', 'Amount'; FINAL = group WATERFALL by 'Group'; FINAL = foreach FINAL generate 'Group', sum('Opportunity.Amount') as 'sum_Opportunity.Amount'; FINAL = order FINAL by 'sum_Opportunity.Amount' desc; FINAL = filter FINAL by 'Group' is not null;\",\"measures\":[[\"sum\",\"Opportunity.Amount\"]],\"groups\":[\"Group\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false,"visualizationParameters":{"visualizationType":"hbar"}},"pipeline_end":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"sum\",\"Amount\"]],\"pigql\":\"END = load \\\"eadx__pipeline_trending1\\\"; END = filter END by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; END = filter END by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; END = filter END by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; END = filter END by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; END = filter END by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; END = filter END by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; END = filter END by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; END = filter END by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; END = filter END by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; END = filter END by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = group END by all; END = foreach END generate \\\"9_END\\\" as 'Bucket', sum('Amount') as 'sum_Amount';\"}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"BillingCountry_BillingState_Chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"eadx__pipeline_trending1\\\"; x1 = filter x1 by {{cell(source_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(AccountSource_Leadsource_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(account_industry_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Account_Type_Industry_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(opportunity_owner_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Opportunity_Owner_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Type\\\"]).asEquality(\\\"Opportunity.Type\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"Id\\\"]).asEquality(\\\"Id\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"UniqueUserName\\\"]).asEquality(\\\"Opportunity.Owner.UniqueUserName\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Type\\\"]).asEquality(\\\"Opportunity.Account.Type\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Industry\\\"]).asEquality(\\\"Opportunity.Account.Industry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.BillingCountry\\\"]).asEquality(\\\"Opportunity.Account.BillingCountry\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.BillingState\\\"]).asEquality(\\\"Opportunity.Account.BillingState\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.AccountSource\\\"]).asEquality(\\\"Opportunity.Account.AccountSource\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.LeadSource\\\"]).asEquality(\\\"Opportunity.LeadSource\\\")}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.BillingCountry', 'Opportunity.Account.BillingState', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.BillingCountry', 'Opportunity.Account.BillingState', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.BillingCountry') as 'Opportunity.Account.BillingCountry', last(upd_end.'Opportunity.Account.BillingState') as 'Opportunity.Account.BillingState', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.BillingCountry', 'Opportunity.Account.BillingState', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Account.BillingCountry', 'Opportunity.Account.BillingState', 'Opportunity.Amount', 'Opportunity.CloseDate', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.BillingCountry', 'Opportunity.Account.BillingState', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.BillingCountry', 'Opportunity.Account.BillingState', 'Opportunity.Amount', 'Opportunity.CloseDate'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.BillingCountry', 'Opportunity.Account.BillingState', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.BillingCountry', 'Opportunity.Account.BillingState', 'Opportunity.Amount', 'Opportunity.CloseDate'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Account.BillingState') as 'Opportunity.Account.BillingState', last('Opportunity.Account.BillingCountry') as 'Opportunity.Account.BillingCountry', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', {{row(location_dimension_dropdown.selection, [], [\\\"dimension\\\", \\\"grouping_column\\\"]).asProjection()}}, 'Opportunity.CloseDate', 'Opportunity.Amount', 'Amount'; FINAL = group WATERFALL by 'Group'; FINAL = foreach FINAL generate 'Group', sum('Opportunity.Amount') as 'sum_Opportunity.Amount'; FINAL = order FINAL by 'sum_Opportunity.Amount' desc; FINAL = filter FINAL by 'Group' is not null;\",\"measures\":[[\"sum\",\"Opportunity.Amount\"]],\"groups\":[\"Group\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false,"visualizationParameters":{"visualizationType":"hbar"}},"filter_account_billing_country":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending1","namespace":"eadx"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.BillingCountry\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false}},"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"container_19":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"fitwidth","image":{"name":"SalesWaveLogo1","namespace":"eadx"}},"type":"container"},"container_18":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original"},"type":"container"},"container_17":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original"},"type":"container"},"container_16":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original"},"type":"container"},"container_15":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original"},"type":"container"},"link_overview":{"parameters":{"destinationLink":{"name":"Sales_Ops_Manager_Overview1","namespace":"eadx"},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"OVERVIEW","textAlignment":"center","textColor":"#5C7A99"},"type":"link"},"container_14":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original"},"type":"container"},"container_13":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_3":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_5":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_6":{"parameters":{"alignmentX":"center","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"text_3":{"parameters":{"content":{"displayTemplate":"Opportunity Details"},"fontSize":16,"showActionMenu":true,"textAlignment":"left","textColor":"rgb(23, 50, 77)"},"type":"text"},"chart_6":{"parameters":{"autoFitMode":"fit","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","visualizationType":"hbar","exploreLink":false,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"textColor":"#FFFFFF","totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"step":"waterfall_chart","theme":"dark","dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"text_2":{"parameters":{"content":{"displayTemplate":"Leader Pipeline Changes"},"fontSize":24,"showActionMenu":true,"textAlignment":"left","textColor":"#091A3E"},"type":"text"},"container_7":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"chart_5":{"parameters":{"autoFitMode":"none","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","visualizationType":"hbar","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"step":"Opportunity_Owner_Chart","theme":"light","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"container_22":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original"},"type":"container"},"text_5":{"parameters":{"content":{"displayTemplate":"Pipeline Segmentation"},"fontSize":16,"showActionMenu":true,"textAlignment":"left","textColor":"#091A3E"},"type":"text"},"container_8":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_21":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original"},"type":"container"},"text_4":{"parameters":{"content":{"displayTemplate":"Starting Pipeline"},"fontSize":14,"showActionMenu":true,"textAlignment":"left","textColor":"#E6ECF2"},"type":"text"},"container_9":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_20":{"parameters":{"alignmentX":"left","alignmentY":"top","fit":"original"},"type":"container"},"chart_2":{"parameters":{"autoFitMode":"none","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","visualizationType":"hbar","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"textColor":"#FFFFFF","totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"step":"AccountSource_Leadsource_Chart","theme":"light","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"chart_1":{"parameters":{"totalValue":"useLastBucket","showValues":true,"positiveColor":"rgb(6, 125, 30)","visualizationType":"waterfall","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"startColor":"rgb(22, 116, 217)","totalLabel":"","showActionMenu":true,"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"totalColor":"rgb(22, 116, 217)","step":"waterfall_chart","theme":"dark","negativeColor":"rgb(227, 25, 59)","dimensionAxis":{"showTitle":false,"showAxis":true,"title":""}},"type":"chart"},"text_6":{"parameters":{"content":{"displayTemplate":"Sort Pipeline Amount by:"},"fontSize":12,"showActionMenu":true,"textAlignment":"right","textColor":"#091A3E"},"type":"text"},"chart_4":{"parameters":{"autoFitMode":"none","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","visualizationType":"hbar","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"step":"Account_Type_Industry_Chart","theme":"light","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"chart_3":{"parameters":{"autoFitMode":"none","totalValue":"computeTotal","bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"showValues":true,"legend":{"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","visualizationType":"hbar","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"flipLabels":false,"showGridLines":true,"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":"","customDomain":{"showDomain":false}},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":"","customDomain":{"showDomain":false}},"step":"BillingCountry_BillingState_Chart","theme":"light","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":"","icons":{"useIcons":false,"iconProps":{"fit":"cover","column":"","type":"round","parameters":{}}}}},"type":"chart"},"text_8":{"parameters":{"content":{"displayTemplate":"Leader Pipeline Changes"},"fontSize":20,"showActionMenu":true,"textAlignment":"center","textColor":"#FFFFFF"},"type":"text"},"text_1":{"parameters":{"content":{"displayTemplate":"Today's pipeline"},"fontSize":14,"showActionMenu":true,"textAlignment":"left","textColor":"#E6ECF2"},"type":"text"},"number_4":{"parameters":{"compact":true,"exploreLink":true,"measureField":"sum_percent","numberColor":"#FFFFFF","numberSize":12,"showActionMenu":true,"step":"pipeline_change","textAlignment":"center","title":"","titleColor":"#FFFFFF","titleSize":12},"type":"number"},"number_3":{"parameters":{"compact":true,"exploreLink":true,"measureField":"sum_Amount","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"pipeline_change","textAlignment":"left","title":"Pipeline Change","titleColor":"#FFFFFF","titleSize":14},"type":"number"},"number_2":{"parameters":{"compact":true,"exploreLink":true,"measureField":"sum_Amount","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"pipeline_start","textAlignment":"left","title":"Starting Pipeline","titleColor":"#FFFFFF","titleSize":14},"type":"number"},"listselector_17":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":false,"measureField":"count","showActionMenu":false,"step":"dropdown_opportunity_type","title":"Opportunity Type"},"type":"listselector"},"number_1":{"parameters":{"compact":true,"exploreLink":true,"measureField":"sum_Amount","numberColor":"#FFFFFF","numberSize":24,"showActionMenu":true,"step":"pipeline_end","textAlignment":"left","title":"Today's Pipeline","titleColor":"#FFFFFF","titleSize":14},"type":"number"},"container_12":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"image_1":{"parameters":{"alignmentX":"center","alignmentY":"top","fit":"fitheight","image":{"name":"OpportunityLogo1","namespace":"eadx"}},"type":"image"},"container_11":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"listselector_10":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"filter_lead_source","title":"Lead Source"},"type":"listselector"},"container_10":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"listselector_16":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"showActionMenu":false,"step":"step_hbar_group","title":""},"type":"listselector"},"listselector_14":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"showActionMenu":false,"step":"opportunity_owner_dimension_dropdown","title":""},"type":"listselector"},"listselector_13":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"showActionMenu":false,"step":"account_industry_dimension_dropdown","title":""},"type":"listselector"},"text_current_dashboard":{"parameters":{"content":{"displayTemplate":"TRENDING"},"fontSize":12,"showActionMenu":true,"textAlignment":"center","textColor":"#091A3E"},"type":"text"},"listselector_6":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"filter_account_industry","title":"Industry"},"type":"listselector"},"listselector_9":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":false,"measureField":"count","showActionMenu":false,"step":"filter_account_source","title":"Account Source"},"type":"listselector"},"listselector_8":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":false,"measureField":"count","showActionMenu":false,"step":"filter_account_billing_country","title":"Billing Country"},"type":"listselector"},"listselector_3":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"source_dimension_dropdown","title":""},"type":"listselector"},"listselector_2":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"none","showActionMenu":false,"step":"step_time","title":"Time Period"},"type":"listselector"},"listselector_5":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":false,"measureField":"count","showActionMenu":false,"step":"filter_type","title":"Account Type"},"type":"listselector"},"listselector_4":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"showActionMenu":false,"step":"location_dimension_dropdown","title":""},"type":"listselector"},"link_3":{"parameters":{"destinationLink":{"name":"About_Wave_for_Sales1","namespace":"eadx"},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"","textAlignment":"center","textColor":"#091A3E"},"type":"link"},"link_4":{"parameters":{"destinationLink":{"name":"About_Wave_for_Sales1","namespace":"eadx"},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"","textAlignment":"center","textColor":"#091A3E"},"type":"link"},"link_by_product":{"parameters":{"destinationLink":{"name":"Sales_Performance","namespace":"eadx"},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"PERFORMANCE","textAlignment":"center","textColor":"#5C7A99"},"type":"link"},"link_1":{"parameters":{"destinationLink":{"name":"Manager_Overview1","namespace":"eadx"},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"MANAGER > ","textAlignment":"center","textColor":"rgb(0, 112, 210)"},"type":"link"},"link_2":{"parameters":{"destinationLink":{"name":"Sales_Stage_Analysis1","namespace":"eadx"},"destinationType":"dashboard","fontSize":12,"includeState":false,"text":"STAGE ANALYSIS","textAlignment":"center","textColor":"#5C7A99"},"type":"link"},"table_1":{"parameters":{"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"mode":"fittocontainer","showActionMenu":true,"step":"waterfall_detail"},"type":"table"},"pillbox_1":{"parameters":{"compact":false,"exploreLink":false,"fontSize":16,"measureField":"count","selectedTab":{"backgroundColor":"#677A97","borderEdges":[],"textColor":"#FFFFFF"},"showActionMenu":true,"step":"Opportunity_ForecastCategoryName_Toggle","textColor":"#5C7A99"},"type":"pillbox"},"listselector_1":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Id_1","title":"Owner"},"type":"listselector"}}}